General feedback
A. Naming conventions
1.  Classes (names and their filename) should use title camel case, like "CamelCase".
2.  Classes (files that start with classdef <ClassName>) should be prefixed with 'DB', 
for example "DBCamelCase"
We are using DB as our namespace to avoid collision with other, external classes that
we may wish to use at some point.  Seeing DB<classname>.m is a way for us to quickly
recognize which classes belong to us.  For example, we want to have a Predator class, but
if we use another library or collection of UAV classes, that also have a Predator class
then we need to make sure the right one is being used.  If not, we run into 
difficult bugs to work through where we try editing one file and not seeing the effects
or getting undefined behavior.
3. Other files that are not classes, should not have the DB prefix and should not use
a leading capitol letter.  For example, "some_script.m" or "someScript.m"
4.  We will not put 'Abstract' or 'A' in the name of abstract classes.
5.  Classes that inherit from an abstract class will have the abstract class name followed by
the subclass name.  For example if we have new laser model 'GE1200', it would be
'DBLaserGE1200' - DB for the namespace of our code, Laser for the parent class, and
GE1200 for the subclass.

B. Classes for the model view controller architecture
Base classes:
1.  Created a base class (DBBase) for all classes called DBBase which inherits from handle.
This base class has properties for tracking an axes and text area.  it also has methods
for logging information to the console and to the text area.  It has an abstract method
getDescription which all concrete subclasses must implement.  This provides some programattic
documentation for the classes.
2.  Created a DBGraphic class - this will contain an axes handle and a line handle that
will hold the graphic item.  Classes that inherit this must define the LINE_PROPERTIES constant 
which contains the line handle properties for the class.  It also has methods
for setting the axes handle and creating the line handle with the properties given.
3.  DBModel - class for our models (e.g. laser, drone)
4.  DBModelWithGraphic - these are models that have an associated line handle - specficially the 
laser and drone classes.
5.  DBController - class for our controllers, specifically the model controllers.  These
will serve as the interface between the view and the model.



@Miron - The DBLaserController needs to be a class.  You created a script that mimicked
what the controller should be doing.  The script is actually a good way to go for testing
the two laser classes we have, but it is incomplete for an actual controller in terms
of the model-view-controller architecture we are going for with this application.
See the updated DBLaserController.m that I created and follow-up with me during/after class
to make sure it makes sense and if it is clearer what we are doing with it; and why we
would design like this.  I moved your version to testing/test_lasers.m and put it
in the teting/ folder.

@Miron and Bobby - I renamed the DBLaserAbstract class to DBLaser (see notes above) and
refactored the code to use the updated class name.

Todo - Create two legitimate laser classes.  Look up the specs on two directed energy weapons and put them in here.


@Jake - The initAxes method needed to create an axes (and figure) if one did not exist.
One option is to use gca (get current axes).  A downside with gca is that if an axes does
exist, it will be used, which you may not want.  It could write over something else.  On
the other hand, you may not want to have things being created over and over again each 
time initAxes is called.  Check out the auxiliar/initAxes method and let me know if the
chanages make sense.


@UAV team -> @Drone team

Renamed DBUAVA --> DBDrone.... DBDrone now inherits DBModelWithGraphic
DBPredator --> DBDronePredator  ... inherits DBDrone
DBQuad --> DBDroneQuad   ... inherits DBDrone

The Drone class --> maxVelocity was a property, but changed to velocity. It can be changed, but won't go
above MAX_SPEED.

MaxSpeed -->  MAX_VELOCITY.  It is a constant so all caps here.  

update()  --> we only need one update method in this case, which can be done in the base class as the 
quad and predator classes will do the same thing, but just have their properties used instead, and this
happens automatically.


DBUAV_Engine --> DBDronesController
Note:  This need to be subclassed.  I subclassed it as a DBController
axes is a keyword in matlab, so it shouldn't be used as a variable name.  and it wasn't
however Axes was, and it is too close to the keyword.  It has been removed since we don't use it anyway.
Also, we don't name properties the same as the classes.  The classes are the instructions that will be 
used to create our objects.  
DBPredator (now DBDronePredator) is code that will create/insantiate a predator object (class instance).

The run method is cool, however it does too much.  We need to give a lot of the control that
is in this method to the simulation engine.  Instead, we will have a simpler 'update' method
for the drone controller class that will be simpler.  The controller is going to be responsible
for instructing the drones to launch and giving them their heading.  It will also keep track
of the status of the drones so we can know when to stop and how well the drones and the laser
did (i.e. statistics)


@Siddiq - I changed the abstract UAV class to DBDrone, becausde it was 
too much alphabet soup for me otherwise.  It inherits from the DBModelWithGraphic class.

@Siddiq
A.  Classes h


@Simulator team - Hank and Jake
DBSimulator < handle  -->  DBSimulator < DBController
updated the constructor - so it does not take a laser controller as input.  apart from 
the axis handle and the text/log handle, this class is going to be responsible for 
creating the laser and swarm controllers which will, in turn, be responsible for creating
the laser and drones.
duckBlindSimulator --> DBSimulator

Question:  What was meant by "nested class" (below)
properties
    axis_handle:  This exists as axesH in the DBController, so we don't need it here; we already have it as axesH
    swarmController --> dronesController  ("nested class"?  Not sure what this phrase meant in the comments.

Question: The following is from chatGPT, but you can't leave this here, we need
to have the previously provided code still.  
% Other methods (initializeSwarmController, run, etc.)
% Remain the same as previously provided